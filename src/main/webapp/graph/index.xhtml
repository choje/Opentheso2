<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns:h="http://xmlns.jcp.org/jsf/html">
    <h:head>
        <title>Opentheso Graphe</title>

        <link rel="icon" type="image/png" href="resources/img/icon_opentheso.png"/>

        <link rel="stylesheet" type="text/css" href="resources/css/diagram.css" />

        <script type="text/javascript" src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
        <script type="text/javascript" src="resources/js/diagram-lib.js"></script>

        <script type="text/javascript" src="https://cdn.rawgit.com/eligrey/canvas-toBlob.js/f1a01896135ab378aa5c0118eadd81da55e698d8/canvas-toBlob.js"></script>
        <script type="text/javascript" src="https://cdn.rawgit.com/eligrey/FileSaver.js/e9d941381475b5df8b7d7691013401e171014e89/FileSaver.min.js"></script>
        <script type="text/javascript" src="https://d3js.org/d3.v3.min.js"></script>

        <style type="text/css">
            .blendCircle {
                mix-blend-mode: multiply;
            }
        </style>

    </h:head>

    <h:body>
        <div>
            <button id='saveButton'>Export my D3 visualization to PNG</button>
        </div>

        <div id="loader-annel">
            <div id="loader"></div>
            <center>
                <img src="resources/img/logo_Opentheso.png" width="50" alt=""/>
            </center>
        </div>

        <div style="display:none; margin-top: 10px;" id="myDiv" class="animate-bottom">
            <table style="align-items: center; justify-content: center; width: 100%; height: 20px;
                   padding-top: 10px; margin-bottom: -15px;">
                <tr>
                    <td style="padding-left: 20px;">
                        <div class="form-group">
                            <span>URL : </span>
                            <input id="url" class="form-field" type="text" placeholder="domain.tld" title="Le graphe est limité à 3000 concepts"/>
                            <button class="btn"
                                    title="Le graphe est limité à 3000 concepts">
                                <img src="resources/img/information.png" width="17" alt="" />
                            </button>
                        </div>
                    </td>
                    <td style="text-align: right; padding-right: 20px; vertical-align:central">
                        <label class="select" >
                            <select id="taille">
                                <option value="#" selected="selected">Taille normale</option>
                                <option value="#">Taille moyenne</option>
                                <option value="#">Taille grande</option>
                                <option value="#">Taille très grande</option>
                            </select>
                        </label>

                        <button class="btn" onclick="expandAll()" title="Ouvrer tous les éléments">
                            <img src="resources/img/expand.png" width="17" alt="" />
                        </button>
                        <button class="btn" onclick="collapseAll()" title="Fermer tous les éléments">
                            <img src="resources/img/collapsing.png" width="17" alt="" />
                        </button>
                        <button class="btn" onclick="window.open('https://d3js.org/','_blank')"
                                title="Copyright ©CNRS ; Ce graphe est basé sur la bibliothèque D3.js">
                            <img src="resources/img/information.png" width="17" alt="" />
                        </button>
                    </td>
                </tr>
            </table>
            <h:form id="formId">
                <h:inputHidden id="id_theso" value="#{selectedTheso.currentIdTheso}" />
                <h:inputHidden id="id_concept" value="#{tree.idConceptSelected}" />
                <h:inputHidden id="langue" value="#{selectedTheso.currentLang}" />
                <h:inputHidden id="base_url" value="#{connect.localUri}" />
            </h:form>
        </div>

    </h:body>

    <script type="text/javascript">
        var idTheso = document.getElementById("formId:id_theso").value;
        var idConcept = document.getElementById("formId:id_concept").value;
        var language = document.getElementById("formId:langue").value;
        var baseUrl = document.getElementById("formId:base_url").value;

        dataLoading({
            url: baseUrl + 'api/graph?theso=' + idTheso + '&amp;id=' + idConcept + '&amp;lang=' + language
        });

        var margin = {top: 20, right: 20, bottom: 20, left: 120},
            width = window.innerWidth - margin.right - margin.left,
            height = 800 - margin.top - margin.bottom;

        var i = 0, duration = 750, root;

        var tree = d3.layout.tree().size([height, width]);

        var diagonal = d3.svg.diagonal()
            .projection(function (d) {
                return [d.y, d.x];
            });

        var svg = d3.select("body").append("svg")
            .attr("width", width + margin.right + margin.left)
            .attr("height", height + margin.top + margin.bottom)
            .append("g")
            .attr("transform", "translate(" + margin.left + "," + margin.top + ")");


        // Set-up the export button
        d3.select('#saveButton').on('click', function(){
            var svgString = getSVGString(svg.node());
            svgString2Image( svgString, 2*width, 2*height, 'png' ); // passes Blob and filesize String to the callback
        });

        // Below are the functions that handle actual exporting:
        // getSVGString ( svgNode ) and svgString2Image( svgString, width, height, format, callback )
        function getSVGString( svgNode ) {
            svgNode.setAttribute('xlink', 'http://www.w3.org/1999/xlink');
            var cssStyleText = getCSSStyles( svgNode );
            appendCSS( cssStyleText, svgNode );

            var serializer = new XMLSerializer();
            var svgString = serializer.serializeToString(svgNode);
            svgString = svgString.replace(/(\w+)?:?xlink=/g, 'xmlns:xlink='); // Fix root xlink without namespace
            svgString = svgString.replace(/NS\d+:href/g, 'xlink:href'); // Safari NS namespace fix

            return svgString;

            function getCSSStyles( parentElement ) {
                var selectorTextArr = [];

                // Add Parent element Id and Classes to the list
                selectorTextArr.push( '#'+parentElement.id );
                for (var c = 0; c &lt; parentElement.classList.length; c++)
                    if ( !contains('.'+parentElement.classList[c], selectorTextArr) )
                        selectorTextArr.push( '.'+parentElement.classList[c] );

                // Add Children element Ids and Classes to the list
                var nodes = parentElement.getElementsByTagName("*");
                for (var i = 0; i &lt; nodes.length; i++) {
                    var id = nodes[i].id;
                    if ( !contains('#'+id, selectorTextArr) )
                        selectorTextArr.push( '#'+id );

                    var classes = nodes[i].classList;
                    for (var c = 0; c &lt; classes.length; c++)
                        if ( !contains('.'+classes[c], selectorTextArr) )
                            selectorTextArr.push( '.'+classes[c] );
                }

                // Extract CSS Rules
                var extractedCSSText = "";
                for (var i = 0; i &lt; document.styleSheets.length; i++) {
                    var s = document.styleSheets[i];

                    try {
                        if(!s.cssRules) continue;
                    } catch( e ) {
                        if(e.name !== 'SecurityError') throw e; // for Firefox
                        continue;
                    }

                    var cssRules = s.cssRules;
                    for (var r = 0; r &lt; cssRules.length; r++) {
                        if ( contains( cssRules[r].selectorText, selectorTextArr ) )
                            extractedCSSText += cssRules[r].cssText;
                    }
                }

                return extractedCSSText;

                function contains(str,arr) {
                    return arr.indexOf( str ) === -1 ? false : true;
                }

            }

            function appendCSS( cssText, element ) {
                var styleElement = document.createElement("style");
                styleElement.setAttribute("type","text/css");
                styleElement.innerHTML = cssText;
                var refNode = element.hasChildNodes() ? element.children[0] : null;
                element.insertBefore( styleElement, refNode );
            }
        }


        function svgString2Image( svgString, width, height, format ) {
            console.log('svgString2Image >> START !');
            var format = format ? format : 'png';

            var imgsrc = 'data:image/svg+xml;base64,'+ btoa( unescape( encodeURIComponent( svgString ) ) ); // Convert SVG string to data URL

            var canvas = document.createElement("canvas");
            var context = canvas.getContext("2d");

            canvas.width = width;
            canvas.height = height;

            var image = new Image();
            image.onload = function() {
                console.log('onload >> HERE !');

                context.clearRect ( 0, 0, width, height );
                context.drawImage(image, 0, 0, width, height);

                canvas.toBlob( function(blob) {
                    console.log('toblob >> START !');
                    var filesize = Math.round( blob.length/1024 ) + ' KB';

                    console.log('save >> START !');
                    saveAs( blob, 'D3 vis exported to PNG.png' ); // FileSaver.js function
                    console.log('save >> DONE !');
                });
            };
            image.src = imgsrc;
        }

    </script>

</html>